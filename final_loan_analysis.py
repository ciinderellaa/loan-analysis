# -*- coding: utf-8 -*-
"""final loan analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DhhlmmJrq5_JH7ut7J2eZmStk9UpJQLS
"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency
from scipy.stats import chisquare,chi2
from scipy.stats import ttest_ind
from scipy import stats
from statsmodels.formula.api import ols
import statsmodels.api as sm
from scipy.stats import mannwhitneyu
from scipy.stats import shapiro, ks_2samp, anderson
from scipy.stats import ranksums
from scipy.stats import kruskal

#read the dataset
data = pd.read_csv('Loan Approval.csv')

# Determine the missing values in the DataFrame
missing_values = data.isnull()

# Count the number of missing values in each column
missing_counts = missing_values.sum()

# Calculate the total number of missing values in the DataFrame
total_missing = missing_counts.sum()

# Calculate the number of rows and columns in the DataFrame
num_rows, num_cols = data.shape

# Calculate the degrees of freedom for the chi-square test
df = 2 * num_cols

# Calculate the critical value for the chi-square test
critical_value = chi2.ppf(0.95, df)

# Calculate the test statistic for the chi-square test
test_statistic = (total_missing - (num_rows * num_cols / 2)) / np.sqrt(num_rows * num_cols * (num_rows + num_cols + 2) / 12)

# Perform the MCAR test
if test_statistic > critical_value:
    print("The data is not missing completely at random (MCAR).")
else:
    print("The data is missing completely at random (MCAR).")

#make a copy
df= data.copy()

#check the Independence of The observations or data points
d=df.drop('Loan_ID',axis=1)
d[d.duplicated()]

#display the first 5 rows of dataset
df.head(5)

# ANALYZING THE TYPES OF VARIABLES
df.info()

# ANALYZING SOME MEASURES OF NUMIRCAL VARIABLES
df.describe()

#display the missing values
df.isnull().sum()

#Display the count in each category in Gender COL
df.Gender.value_counts()

#Fill the missing value withe New Category(Unknown)
df.Gender.fillna('Unknown', inplace=True)
df.Gender.value_counts()

#Display the count in each category in Married COL
df.Married.value_counts()

#Fill the missing value withe New Category(Unknown)
df.Married.fillna('Unknown', inplace=True)
df.Married.value_counts()

#Display the count in each category in Dependents COL
df.Dependents.value_counts()

#Fill the missing value withe New Category(-1)
df.Dependents.fillna('-1', inplace=True)
df.Dependents.value_counts()

#Display the count in each category in Self_Employed COL
df.Self_Employed.value_counts()

#Fill the missing value withe New Category(Unknown)
df.Self_Employed.fillna('unknown', inplace=True)
df.Self_Employed.value_counts()

#Display the count in each category in Credit History COL
df.Credit_History.value_counts()

#Fill the missing value withe New Category(-1)
df.Credit_History.fillna(-1, inplace=True)
df.Credit_History.value_counts()

"""# Analysis of Loan Amount column"""

#Display the value counts in LoanAmount COL
df.LoanAmount.value_counts()

"""# Loan Amount Distribution: Analyze the distribution of loan amounts by calculating descriptive statistics such as mean, median,and standard deviation.This can help identify the range of loan amounts and the most common loan amount requested by customers."""

# calculate descriptive statistics for LoanAmount
loan_amount_mean = df['LoanAmount'].mean()
loan_amount_median = df['LoanAmount'].median()
loan_amount_std = df['LoanAmount'].std()

# print the results
print(f"Loan Amount Mean: {loan_amount_mean:.2f}")
print(f"Loan Amount Median: {loan_amount_median:.2f}")
print(f"Loan Amount Standard Deviation: {loan_amount_std:.2f}")

#Histogram of the 'LoanAmount' ,help us understand the distribution and range of loan amounts in our dataset
sns.histplot(df['LoanAmount'],kde=True,stat='density')

# Drop rows containing missing values in the LoanAmount column
df.dropna(subset=['LoanAmount'], inplace=True)

#Take log of LoanAmount in new Column to Check normality
df[['LoanAmount_log']]=np.log(df[['LoanAmount']])

#Histogram of the 'LoanAmount' ,help us understand the distribution and range of loan amounts in our dataset
sns.histplot(df['LoanAmount_log'],kde=True,stat='density')

#Check normality of LoanAmount with Shapiro-Wilk
shapiro_LoanAmount= shapiro(df['LoanAmount_log'])
print('Shapiro-Wilk test results:')
print('LoanAmount:', shapiro_LoanAmount)

"""Because the (p-value <0.05) very small that mean the loan Amount NOT Normally Distributed"""

#Display The LoanAmount
df['LoanAmount']

# a box plot of the 'LoanAmount', identify the range and distribution of the loan amounts
sns.boxplot(data=df, x='LoanAmount')

"""# 1-Is there a relationship between marital status (Married) and loan Amount?"""

# Subset the dataset into two groups based on 'Married'
married_LoanAmount = df[df['Married'] == 'Yes']['LoanAmount']
not_married_LoanAmount = df[df['Married'] == 'No']['LoanAmount']

# Check homogeneity of variance using box plots and Levene's test
sns.boxplot(x='Married', y='LoanAmount', data=df)
statistic, p_value = stats.levene(married_LoanAmount, not_married_LoanAmount)
print(f"Levene's test results: statistic={statistic:.2f}, p-value={p_value:.2f}")

# Check normality assumption using Q-Q plots
fig, ax = plt.subplots(1, 2)
stats.probplot(married_LoanAmount, plot=ax[0])
stats.probplot(not_married_LoanAmount, plot=ax[1])

ax[0].set_title('married_LoanAmount')
ax[1].set_title('not_married_LoanAmount')
plt.show()

# Check normality assumption using Shapiro-Wilk test
shapiro_married = shapiro(married_LoanAmount)
shapiro_unmarried = shapiro(not_married_LoanAmount)

# Print the results
print('Shapiro-Wilk test results:')
print('Married:', shapiro_married)
print('Unmarried:', shapiro_unmarried)

"""After doing some tests to check the homogeneity of variance and normality ,see the assumptions of T test or Anova test not materialized . So we will Use nonparametric tests :"""

# Use Wilcoxon rank-sum test to compare "LoanAmount" between married and unmarried applicants
married = df[df['Married'] == 'Yes']['LoanAmount']
unmarried = df[df['Married'] == 'No']['LoanAmount']

wilcoxon_test = ranksums(married, unmarried)
print('Wilcoxon rank-sum test results:')
print('p-value:', wilcoxon_test.pvalue)
if wilcoxon_test.pvalue < 0.05:
     print("There is a significant difference in LoanAmount based on Married.")
else:
    print("There is no significant difference in LoanAmount based on Married.")

# Calculate the means
mean_married = df[df["Married"] == "Yes"]["LoanAmount"].mean()
mean_not_married = df[df["Married"] == "No"]["LoanAmount"].mean()

# Print the means
print("Mean Loan Amount (Married):", mean_married)
print("Mean Loan Amount (Not Married):", mean_not_married)

if mean_married > mean_not_married:
    print("Married individuals tend to ask for bigger loans.")
else:
    print("Not married individuals tend to ask for bigger loans.")

"""what i got from above 2 notebookes?

The insights gained from these analyses suggest that marital status may be an important factor in predicting loan amount,with married individuals tending to request larger loans on average than not married individuals.This information could be useful for lenders in developing loan products tailored to specific demographic groups.

# 2-Is there a relationship between Property Area and loan Amount?
"""

# Subset the dataset into two groups based on 'Property_Area'
urban = df[df['Property_Area'] == 'Urban']['LoanAmount']
rural = df[df['Property_Area'] == 'Rural']['LoanAmount']
semiurban = df[df['Property_Area'] == 'Semiurban']['LoanAmount']

# Check homogeneity of variance using box plots and Levene's test
plt.boxplot([urban, rural, semiurban], labels=['Urban', 'Rural', 'Semiurban'])
plt.show()
statistic, p_value =stats.levene(urban, rural, semiurban)

print(f"Levene's test results: statistic={statistic:.2f}, p-value={p_value:.2f}")

# Check normality assumption using Q-Q plots
fig, ax = plt.subplots(1, 3)
stats.probplot(urban, plot=ax[0])
stats.probplot(rural, plot=ax[1])
stats.probplot(semiurban, plot=ax[2])
ax[0].set_title('Urban Area')
ax[1].set_title(' Rural Area')
ax[2].set_title(' Semiurban Area')
plt.show()

# Check normality assumption using Shapiro-Wilk test
shapiro_urban = shapiro(urban)
shapiro_rural = shapiro(rural)
shapiro_semiurban = shapiro(semiurban)

# Print the results
print('Shapiro-Wilk test results:')
print('urba:', shapiro_urban)
print('rural:', shapiro_rural)
print('semiurban:', shapiro_semiurban)

"""After doing some tests to check the homogeneity of variance and normality ,see the assumptions of T test or Anova test not materialized . So we will Use nonparametric tests :"""

# Use Kruskal-Wallis H test to compare "LoanAmount" between urban ,semiurban and rural applicants
urban = df[df['Property_Area'] == 'Urban']['LoanAmount']
rural = df[df['Property_Area'] == 'Rural']['LoanAmount']
semiurban = df[df['Property_Area'] == 'Semiurban']['LoanAmount']

kruskal_test = kruskal(urban, rural, semiurban)
print('Kruskal-Wallis H test results:')
print('p-value:', kruskal_test.pvalue)
if kruskal_test.pvalue < 0.05:
     print("There is a significant difference in LoanAmount based on Property_Area.")
else:
    print("There is no significant difference in LoanAmount based on Property_Area.")

"""# 3-Is there a relationship between Gender and Loan Amount?"""

# Subset the dataset into two groups based on 'Gender'
male_LoanAmount =df[df["Gender"] == "Male"]["LoanAmount"]
female_LoanAmount = df[df["Gender"] == "Female"]["LoanAmount"]

# Check homogeneity of variance using box plots and Levene's test
sns.boxplot(x='Gender', y='LoanAmount', data=df)
statistic, p_value = stats.levene(male_LoanAmount, female_LoanAmount)
print(f"Levene's test results: statistic={statistic:.2f}, p-value={p_value:.2f}")

# Check normality assumption using Q-Q plots
fig, ax = plt.subplots(1, 2)
stats.probplot(male_LoanAmount, plot=ax[0])
stats.probplot(female_LoanAmount, plot=ax[1])
ax[0].set_title('male_LoanAmount')
ax[1].set_title('female_LoanAmount')
plt.show()

# Check normality assumption using Shapiro-Wilk test
shapiro_male = shapiro(male_LoanAmount)
shapiro_female = shapiro(female_LoanAmount)

# Print the results
print('Shapiro-Wilk test results:')
print('male:', shapiro_male)
print('female:', shapiro_female)

"""After doing some tests to check the homogeneity of variance and normality ,see the assumptions of T test or Anova Test not materialized . So we will Use nonparametric tests :"""

# Use Kruskal-Wallis H test to compare "LoanAmount" between urban ,semiurban and rural applicants
male_LoanAmount =df[df["Gender"] == "Male"]["LoanAmount"]
female_LoanAmount = df[df["Gender"] == "Female"]["LoanAmount"]

kruskal_test = kruskal(male_LoanAmount, female_LoanAmount)
print('Kruskal-Wallis H test results:')
print('p-value:', kruskal_test.pvalue)
if kruskal_test.pvalue < 0.05:
     print("There is a significant difference in LoanAmount based on Gender.")
else:
    print("There is no significant difference in LoanAmount based on Gender.")

# Calculate the means
mean_male = df[df["Gender"] == "Male"]["LoanAmount"].mean()
mean_female = df[df["Gender"] == "Female"]["LoanAmount"].mean()

# Print the means
print("Mean Loan Amount (Male):", mean_male)
print("Mean Loan Amount (Female):", mean_female)

if mean_male > mean_female:
    print("Males tend to ask for bigger loans.")
else:
    print("Females tend to ask for bigger loans.")

"""what i got from above 2 notebookes?

The insights gained from these analyses suggest that gender may be an important factor in predicting loan amount, with males tending to request larger loans on average than females. This information could be useful for lenders in developing loan products tailored to specific demographic groups.

# 4-Is there a relationship between Self Employed and Loan Amount?
"""

# Subset the dataset into two groups based on 'Self_Employed'
LoanAmount_Self_Employed_Y = df[df['Self_Employed'] == 'Yes']['LoanAmount']
LoanAmount_Self_Employed_N = df[df['Self_Employed'] == 'No']['LoanAmount']

# Check homogeneity of variance using box plots and Levene's test
sns.boxplot(x='Self_Employed', y='LoanAmount', data=df)
statistic, p_value = stats.levene(LoanAmount_Self_Employed_Y,LoanAmount_Self_Employed_N)
print(f"Levene's test results: statistic={statistic:.2f}, p-value={p_value:.2f}")

# Check normality assumption using Q-Q plots
fig, ax = plt.subplots(1, 2)
stats.probplot(LoanAmount_Self_Employed_Y, plot=ax[0])
stats.probplot(LoanAmount_Self_Employed_N, plot=ax[1])

ax[0].set_title('LoanAmount_Self_Employed_Y')
ax[1].set_title('LoanAmount_Self_Employed_N')
plt.show()

# Check normality assumption using Shapiro-Wilk test
shapiro_SELF_Y = shapiro(LoanAmount_Self_Employed_Y)
shapiro_SELF_N = shapiro(LoanAmount_Self_Employed_N)

# Print the results
print('Shapiro-Wilk test results:')
print('LoanAmount_Self_Employed_Y:', shapiro_SELF_Y)
print('LoanAmount_Self_Employed_N:', shapiro_SELF_N)

"""After doing some tests to check the homogeneity of variance and normality ,see the assumptions of T test or Anova Test not materialized . So we will Use nonparametric tests :"""

# Use Kruskal-Wallis H test to compare relation between LoanAmount and Self_Employed
self_employed_loan = df[df["Self_Employed"] == "Yes"]["LoanAmount"]
not_self_employed_loan = df[df["Self_Employed"] == "No"]["LoanAmount"]

kruskal_test = kruskal(self_employed_loan, not_self_employed_loan)
print('Kruskal-Wallis H test results:')
print('p-value:', kruskal_test.pvalue)
if kruskal_test.pvalue < 0.05:
     print("There is a significant difference in LoanAmount based on Self_Employed.")
else:
    print("There is no significant difference in LoanAmount based on Self_Employed.")

# Calculate the means
mean_self_employed = self_employed_loan.mean()
mean_not_self_employed = not_self_employed_loan.mean()

# Print the means
print("Mean Loan Amount (Self Employed):", mean_self_employed)
print("Mean Loan Amount (Not Self Employed):", mean_not_self_employed)

if mean_self_employed > mean_not_self_employed:
    print("Self-employed individuals tend to ask for bigger loans.")
else:
    print("Non-self-employed individuals tend to ask for bigger loans.")

"""what i got from above 2 notebookes?

The insights gained from these analyses suggest that self-employment status may be an important factor in predicting loan amount, with self-employed individuals tending to request larger loans on average than not self-employed individuals. This information could be useful for lenders in developing loan products tailored to specific demographic groups.

# 5-Is there a relationship between Credit_History and Loan Amount?
"""

# Calculate loan amount statistics by credit history category
loan_amount_stats = df.groupby("Credit_History")["LoanAmount"].describe()

# Print loan amount statistics
print("Loan Amount Statistics by Credit History:")
print(loan_amount_stats)

# Subset the dataset into two groups based on 'Credit_History'
LoanAmount_Credit_History1 = df[df['Credit_History'] == 1]['LoanAmount']
LoanAmount_Credit_History0 = df[df['Credit_History'] == 0]['LoanAmount']

# Check homogeneity of variance using box plots and Levene's test
sns.boxplot(x='Credit_History', y='LoanAmount', data=df)
statistic, p_value = stats.levene(LoanAmount_Credit_History1,LoanAmount_Credit_History0)
print(f"Levene's test results: statistic={statistic:.2f}, p-value={p_value:.2f}")

# Check normality assumption using Q-Q plots
fig, ax = plt.subplots(1, 2)
stats.probplot(LoanAmount_Credit_History1, plot=ax[0])
stats.probplot(LoanAmount_Credit_History0, plot=ax[1])

ax[0].set_title('LoanAmount_Credit_History1')
ax[1].set_title('LoanAmount_Credit_History0')
plt.show()

# Check normality assumption using Shapiro-Wilk test
shapiro_Credit1 = shapiro(LoanAmount_Credit_History1)
shapiro_Credit0 = shapiro(LoanAmount_Credit_History0)

# Print the results
print('Shapiro-Wilk test results:')
print('LoanAmount_Credit_History1:', shapiro_Credit1)
print('LoanAmount_Credit_History0:', shapiro_Credit0)

"""After doing some tests to check the homogeneity of variance and normality ,see the assumptions of T test or Anova test not materialized . So we will Use nonparametric tests :"""

# Use Kruskal-Wallis H test to compare relation between LoanAmount and loan approval status
loan_amount_good_credit = df[df["Credit_History"] == 1]["LoanAmount"]
loan_amount_poor_credit = df[df["Credit_History"] == 0]["LoanAmount"]


kruskal_test = kruskal(loan_amount_good_credit, loan_amount_poor_credit )
print('Kruskal-Wallis H test results:')
print('p-value:', kruskal_test.pvalue)
if kruskal_test.pvalue < 0.05:
    print("There is a significant difference in loan amount between people with good credit history and poor credit history.")
else:
    print("There is no significant difference in loan amount between people with good credit history and poor credit history.")

"""# Loan Amount vs. Income: Analyze the relationship between loan amount and income by plotting a scatter plot and calculating the correlation coefficient.This can help identify if there is a positive or negative correlation between the two variables and how strong the relationship is."""

# create a scatter plot of LoanAmount vs. ApplicantIncome
sns.scatterplot(x='ApplicantIncome', y='LoanAmount', data=df)

# calculate the correlation coefficient between the two variables
corr_coef = np.corrcoef(df['ApplicantIncome'], df['LoanAmount'])[0,1]
print(f"The correlation coefficient between Income and LoanAmount is {corr_coef:.2f}")

# add a title and axis labels to the plot
plt.title('Loan Amount vs. ApplicantIncome')
plt.xlabel('ApplicantIncome')
plt.ylabel('Loan Amount')
plt.show()

"""what i got from this notebooke?

This analysis suggests that there is a moderate positive relationship between "ApplicantIncome" and "LoanAmount" .This means that as "ApplicantIncome" increases, "LoanAmount" tends to increase as well, although the relationship is not perfect. However, the correlation does not imply causation, and other variables may also be influencing the relationship between these two variables.

# Analysis of Loan Amount Term Column
"""

# calculate descriptive statistics for Loan_Amount_Term
loan_amount__term_mean = df['Loan_Amount_Term'].mean()
loan_amount_term_median = df['Loan_Amount_Term'].median()
loan_amount_term_std = df['Loan_Amount_Term'].std()

# print the results
print(f"Loan Amount Term Mean: {loan_amount__term_mean:.2f}")
print(f"Loan Amount Term Median: {loan_amount_term_median:.2f}")
print(f"Loan Amount Term Standard Deviation: {loan_amount_term_std:.2f}")

df['Loan_Amount_Term'].value_counts()

#a histogram of the 'Loan_Amount_Term',provide valuable insights into the loan term and understand the distribution of loan term

sns.histplot(df['Loan_Amount_Term'],kde=True,stat='density')

#Fill the missing value withe New Category (-1)
df.Loan_Amount_Term.fillna(-1, inplace=True)
df['Loan_Amount_Term'].value_counts()

#Histogram of the 'Loan_Amount_Term' ,help us understand the distribution and range of loan amounts in our dataset
sns.histplot(df['Loan_Amount_Term'],kde=True,stat='density')

"""# some Analysis between Loan Amount and Loan Amount Term"""

# Select the relevant columns for the analysis
selected_columns = ["LoanAmount", "Loan_Amount_Term"]
data = df[selected_columns]

# Add a constant column for the intercept term
data = sm.add_constant(data)

# Perform linear regression
model = sm.OLS(data["Loan_Amount_Term"], data[["const", "LoanAmount"]])
results = model.fit()

# Print the regression results
print(results.summary())



"""# Analysis of Loan Status column

# Loan Approval Rate: Calculate the loan approval rate. This can help identify how many loan applications were approved and how many were rejected.
"""

# Count the number of loan applications with Loan_Status = Y
approved_loans = (df['Loan_Status'] == 'Y').sum()

# Calculate the total number of loan applications
total_loans = len(df)

# Calculate the loan approval rate
approval_rate = approved_loans / total_loans

print(f'Loan approval rate: {approval_rate:.2%}')

"""# 1-Is there a relationship between Gender and loan approval status?"""

#Testing relation between Gender and loan approval status
conti =pd.crosstab(df['Gender'],df['Loan_Status'])
h0='There is no relation between Gender and Loan Status'
h1='There is a relation between Gender and Loan Status'
c,p,dof,expected =chi2_contingency(conti)
if p < 0.05:
     print('P-value is {} so its less than  0.05 so we will  reject the null hypothesis'.format(p))
else:
     print('P-value is {} so its more than  0.05 so we will  accept the null hypothesis'.format(p))

"""# 2-Is there a relationship between marital status and loan approval status?"""

#Testing relation between marital status and loan approval status
conti =pd.crosstab(df['Married'],df['Loan_Status'])
h0='There is no relation between marital status and Loan Status'
h1='There is a relation between marital status and Loan Status'
c,p,dof,expected =chi2_contingency(conti)
if p < 0.05:
     print('P-value is {} so its less than  0.05 so we will  reject the null hypothesis'.format(p))
else:
     print('P-value is {} so its more than  0.05 so we will  accept the null hypothesis'.format(p))

"""# 3-Is there a relationship between Dependents and loan approval status?"""

#Testing relation between Dependents and loan approval status
conti =pd.crosstab(df['Dependents'],df['Loan_Status'])
h0='There is no relation between Dependents and Loan Status'
h1='There is a relation between Dependents and Loan Status'
c,p,dof,expected =chi2_contingency(conti)
if p < 0.05:
     print('P-value is {} so its less than  0.05 so we will  reject the null hypothesis'.format(p))
else:
     print('P-value is {} so its more than  0.05 so we will  accept the null hypothesis'.format(p))

"""# 4-Is there a relationship between Educational background and loan approval status?"""

#Testing relation between Educational background and loan approval status
conti =pd.crosstab(df['Education'],df['Loan_Status'])
h0='There is no relation between Education and Loan Status'
h1='There is a relation between Education and Loan Status'
c,p,dof,expected =chi2_contingency(conti)
if p < 0.05:
     print('P-value is {} so its less than  0.05 so we will  reject the null hypothesis'.format(p))
else:
     print('P-value is {} so its more than  0.05 so we will  accept the null hypothesis'.format(p))

"""# 5-Is there a relationship between Self_Employed and loan approval status?"""

#Testing relation between Self_Employed and loan approval status
conti =pd.crosstab(df['Self_Employed'],df['Loan_Status'])
h0='There is no relation between Self_Employed and Loan Status'
h1='There is a relation between Self_Employed and Loan Status'
c,p,dof,expected =chi2_contingency(conti)
if p < 0.05:
     print('P-value is {} so its less than  0.05 so we will  reject the null hypothesis'.format(p))
else:
     print('P-value is {} so its more than  0.05 so we will  accept the null hypothesis'.format(p))

"""# 6-Is there a relationship between Credit_History and loan approval status?"""

#Testing relation between Credit_History and loan approval status
conti =pd.crosstab(df['Credit_History'],df['Loan_Status'])
h0='There is no relation between Credit_History and Loan Status'
h1='There is a relation between Credit_History and Loan Status'
c,p,dof,expected =chi2_contingency(conti)
if p < 0.05:
     print('P-value is {} so its less than  0.05 so we will  reject the null hypothesis'.format(p))
else:
     print('P-value is {} so its more than  0.05 so we will  accept the null hypothesis'.format(p))

"""# 7-Is there a relationship between Property_Area and loan approval status?"""

#Testing relation between Property_Area and loan approval status
conti =pd.crosstab(df['Property_Area'],df['Loan_Status'])
h0='There is no relation between Property_Area and Loan Status'
h1='There is a relation between Property_Area and Loan Status'
c,p,dof,expected =chi2_contingency(conti)
if p < 0.05:
     print('P-value is {} so its less than  0.05 so we will  reject the null hypothesis'.format(p))
else:
     print('P-value is {} so its more than  0.05 so we will  accept the null hypothesis'.format(p))

"""# 8-Is there a relationship between Loan_Amount_Term and loan approval status?"""

#Testing relation between Loan_Amount_Term and loan approval status
conti =pd.crosstab(df['Loan_Amount_Term'],df['Loan_Status'])
h0='There is no relation between Loan_Amount_Term and Loan Status'
h1='There is a relation between Loan_Amount_Term and Loan Status'
c,p,dof,expected =chi2_contingency(conti)
if p < 0.05:
     print('P-value is {} so its less than  0.05 so we will  reject the null hypothesis'.format(p))
else:
     print('P-value is {} so its more than  0.05 so we will  accept the null hypothesis'.format(p))

"""# 9-Is there a relationship between ApplicantIncome and loan approval status?"""

# Subset the dataset into two groups based on 'ApplicantIncome'
ApplicantIncome_LoanST_Y = df[df['Loan_Status'] == 'Y']['ApplicantIncome']
ApplicantIncome_LoanST_N = df[df['Loan_Status'] == 'N']['ApplicantIncome']

# Check homogeneity of variance using box plots and Levene's test
sns.boxplot(x='Loan_Status', y='ApplicantIncome', data=df)
statistic, p_value = stats.levene(ApplicantIncome_LoanST_Y,ApplicantIncome_LoanST_N)
print(f"Levene's test results: statistic={statistic:.2f}, p-value={p_value:.2f}")

# Check normality assumption using Q-Q plots
fig, ax = plt.subplots(1, 2)
stats.probplot(ApplicantIncome_LoanST_Y, plot=ax[0])
stats.probplot(ApplicantIncome_LoanST_N, plot=ax[1])

ax[0].set_title('ApplicantIncome_LoanST_Y')
ax[1].set_title('ApplicantIncome_LoanST_N')
plt.show()

# Check normality assumption using Shapiro-Wilk test
shapiro_APP_Y = shapiro(ApplicantIncome_LoanST_Y)
shapiro_APP_N = shapiro(ApplicantIncome_LoanST_N)

# Print the results
print('Shapiro-Wilk test results:')
print('ApplicantIncome_LoanST_Y:', shapiro_APP_Y)
print('ApplicantIncome_LoanST_N:', shapiro_APP_N)

"""After doing some tests to check the homogeneity of variance and normality ,see the assumptions of T test or Anova test not materialized . So we will Use nonparametric tests :"""

# Use Kruskal-Wallis H test to compare relation between applicant's income and loan approval status
ApplicantIncome_LoanST_Y = df[df['Loan_Status'] == 'Y']['ApplicantIncome']
ApplicantIncome_LoanST_N = df[df['Loan_Status'] == 'N']['ApplicantIncome']

kruskal_test = kruskal(ApplicantIncome_LoanST_Y, ApplicantIncome_LoanST_N)
print('Kruskal-Wallis H test results:')
print('p-value:', kruskal_test.pvalue)
if kruskal_test.pvalue < 0.05:
     print("There is a significant difference in ApplicantIncome based on Loan_Status.")
else:
    print("There is no significant difference in ApplicantIncome based on Loan_Status.")

"""# 10-Is there a relationship between CoapplicantIncome and loan approval status?"""

# Subset the dataset into two groups based on 'Loan_Status'
CoapplicantIncome_LoanST_Y = df[df['Loan_Status'] == 'Y']['CoapplicantIncome']
CoapplicantIncome_LoanST_N = df[df['Loan_Status'] == 'N']['CoapplicantIncome']

# Check homogeneity of variance using box plots and Levene's test
sns.boxplot(x='Loan_Status', y='CoapplicantIncome', data=df)
statistic, p_value = stats.levene(CoapplicantIncome_LoanST_Y,CoapplicantIncome_LoanST_N)
print(f"Levene's test results: statistic={statistic:.2f}, p-value={p_value:.2f}")

# Check normality assumption using Q-Q plots
fig, ax = plt.subplots(1, 2)
stats.probplot(CoapplicantIncome_LoanST_Y, plot=ax[0])
stats.probplot(CoapplicantIncome_LoanST_N, plot=ax[1])

ax[0].set_title('CoapplicantIncome_LoanST_Y')
ax[1].set_title('CoapplicantIncome_LoanST_N')
plt.show()

# Check normality assumption using Shapiro-Wilk test
shapiro_COAPP_Y = shapiro(CoapplicantIncome_LoanST_Y)
shapiro_COAPP_N = shapiro(CoapplicantIncome_LoanST_N)

# Print the results
print('Shapiro-Wilk test results:')
print('CoapplicantIncome_LoanST_Y:', shapiro_COAPP_Y)
print('CoapplicantIncome_LoanST_N:', shapiro_COAPP_N)

"""After doing some tests to check the homogeneity of variance and normality ,see the assumptions of T test or Anova test not materialized . So we will Use nonparametric tests :"""

# Use Kruskal-Wallis H test to compare relation between coapplicant's income and loan approval status
CoapplicantIncome_LoanST_Y = df[df['Loan_Status'] == 'Y']['CoapplicantIncome']
CoapplicantIncome_LoanST_N = df[df['Loan_Status'] == 'N']['CoapplicantIncome']

kruskal_test = kruskal(CoapplicantIncome_LoanST_Y, CoapplicantIncome_LoanST_N)
print('Kruskal-Wallis H test results:')
print('p-value:', kruskal_test.pvalue)
if kruskal_test.pvalue < 0.05:
     print("There is a significant difference in CoapplicantIncome based on Loan_Status.")
else:
    print("There is no significant difference in CoapplicantIncome based on Loan_Status.")

#another Test
# Extract the relevant columns
coapplicant_income = df['CoapplicantIncome']
loan_status = df['Loan_Status']

# Split the CoapplicantIncome based on loan_status
income_group1 = coapplicant_income[loan_status == 'Y']
income_group2 = coapplicant_income[loan_status == 'N']

# Apply Mann-Whitney U test
mannwhitneyu_test = mannwhitneyu(income_group1, income_group2)

# Print the test result
print("Mann-Whitney U test p-value:", mannwhitneyu_test.pvalue)

"""# 11-Is there a relationship between Loan Amount and loan approval status?"""

# Subset the dataset into two groups based on 'loan status'
LoanAmount_LoanST_Y = df[df['Loan_Status'] == 'Y']['LoanAmount']
LoanAmount_LoanST_N = df[df['Loan_Status'] == 'N']['LoanAmount']

# Check homogeneity of variance using box plots and Levene's test
sns.boxplot(x='Loan_Status', y='LoanAmount', data=df)
statistic, p_value = stats.levene(LoanAmount_LoanST_Y,LoanAmount_LoanST_N)
print(f"Levene's test results: statistic={statistic:.2f}, p-value={p_value:.2f}")

# Check normality assumption using Q-Q plots
fig, ax = plt.subplots(1, 2)
stats.probplot(LoanAmount_LoanST_Y, plot=ax[0])
stats.probplot(LoanAmount_LoanST_N, plot=ax[1])

ax[0].set_title('LoanAmount_LoanST_Y')
ax[1].set_title('LoanAmount_LoanST_N')
plt.show()

# Check normality assumption using Shapiro-Wilk test
shapiro_AMOUNT_Y = shapiro(LoanAmount_LoanST_Y)
shapiro_AMOUNT_N = shapiro(LoanAmount_LoanST_N)

# Print the results
print('Shapiro-Wilk test results:')
print('LoanAmount_LoanST_Y:', shapiro_AMOUNT_Y)
print('LoanAmount_LoanST_N:', shapiro_AMOUNT_N)

"""After doing some tests to check the homogeneity of variance and normality ,see the assumptions of T test or Anova test not materialized . So we will Use nonparametric tests :"""

# Use Kruskal-Wallis H test to compare relation between LoanAmount and loan approval status
LoanAmount_LoanST_Y = df[df['Loan_Status'] == 'Y']['LoanAmount']
LoanAmount_LoanST_N = df[df['Loan_Status'] == 'N']['LoanAmount']

kruskal_test = kruskal(LoanAmount_LoanST_Y, LoanAmount_LoanST_N)
print('Kruskal-Wallis H test results:')
print('p-value:', kruskal_test.pvalue)
if kruskal_test.pvalue < 0.05:
     print("There is a significant difference in LoanAmount based on Loan_Status.")
else:
    print("There is no significant difference in LoanAmount based on Loan_Status.")

"""# Applicant Type Impact: Analyze the impact of applicant type on loan approval by comparing the loan approval rate for self-employed applicants versus those who are not self-employed."""

# Calculate the loan approval rate for self-employed applicants
self_emp_approved = df.loc[(df['Self_Employed'] == 'Yes') & (df['Loan_Status'] == 'Y'), 'Loan_Status'].count()
self_emp_total = df.loc[df['Self_Employed'] == 'Yes', 'Loan_Status'].count()
self_emp_approval_rate = self_emp_approved / self_emp_total

# Calculate the loan approval rate for non-self-employed applicants
non_self_emp_approved = df.loc[(df['Self_Employed'] == 'No') & (df['Loan_Status'] == 'Y'), 'Loan_Status'].count()
non_self_emp_total = df.loc[df['Self_Employed'] == 'No', 'Loan_Status'].count()
non_self_emp_approval_rate = non_self_emp_approved / non_self_emp_total

print(f'Self-employed approval rate: {self_emp_approval_rate:.2%}')
print(f'Non-self-employed approval rate: {non_self_emp_approval_rate:.2%}')

"""# Credit History Impact: Analyze the impact of credit history on loan approval by comparing the loan approval rate for customers with good credit history (Credit_History = 1) versus those with bad credit history (Credit_History = 0)"""

# Calculate the loan approval rate for customers with good credit history
good_credit_approved = df.loc[(df['Credit_History'] == 1) & (df['Loan_Status'] == 'Y'), 'Loan_Status'].count()
good_credit_total = df.loc[df['Credit_History'] == 1, 'Loan_Status'].count()
good_credit_approval_rate = good_credit_approved / good_credit_total

# Calculate the loan approval rate for customers with bad credit history
bad_credit_approved = df.loc[(df['Credit_History'] == 0) & (df['Loan_Status'] == 'Y'), 'Loan_Status'].count()
bad_credit_total = df.loc[df['Credit_History'] == 0, 'Loan_Status'].count()
bad_credit_approval_rate = bad_credit_approved / bad_credit_total

print(f'Good credit approval rate: {good_credit_approval_rate:.2%}')
print(f'Bad credit approval rate: {bad_credit_approval_rate:.2%}')

"""# loan approval rate for each property area"""

# Calculate the loan approval rate for each property area
approval_rates = df.groupby('Property_Area')['Loan_Status'].value_counts(normalize=True).mul(100).rename('Approval_Rate').reset_index()

print(approval_rates)

"""# Analysis of ApplicantIncome column"""

#Histogram of the 'ApplicantIncome' ,help us understand the distribution and range of ApplicantIncome in our dataset
sns.histplot(df['ApplicantIncome'],kde=True,stat='density')

# a box plot of the 'ApplicantIncome', identify the range and distribution of the ApplicantIncome
sns.boxplot(data=df, x='ApplicantIncome')

df[['ApplicantIncome_log']]=np.log(df[['ApplicantIncome']])

#Histogram of the 'ApplicantIncome' ,help us understand the distribution and range of loan amounts in our dataset
sns.histplot(df['ApplicantIncome_log'],kde=True,stat='density')

#Check normality of ApplicantIncome with Shapiro-Wilk
shapiro_ApplicantIncome= shapiro(df['ApplicantIncome_log'])
print('Shapiro-Wilk test results:')
print('ApplicantIncome:', shapiro_ApplicantIncome)

"""Because the p-value is very small(p-value<0.05) ,the ApplicantIncome NOT Normally Distributed

# INCOME Distribution: Analyze the distribution of INCOME by calculating descriptive statistics such as mean, median,and standard deviation.This can help identify the range of income levels of customers and whether there are any outliers or anomalies.
"""

# calculate descriptive statistics for ApplicantIncome
ApplicantIncome_mean = df['ApplicantIncome'].mean()
ApplicantIncome_median = df['ApplicantIncome'].median()
ApplicantIncome_std = df['ApplicantIncome'].std()

# print the results
print(f"ApplicantIncome Mean: {ApplicantIncome_mean:.2f}")
print(f"ApplicantIncome Median: {ApplicantIncome_median:.2f}")
print(f"ApplicantIncome Standard Deviation: {ApplicantIncome_std:.2f}")

"""# Is there a relationship between Credit_History and ApplicantIncome?"""

# Subset the dataset into two groups based on 'Credit_History'
applicant_income_good_credit = df[df["Credit_History"] == 1]["ApplicantIncome"]
applicant_income_poor_credit = df[df["Credit_History"] == 0]["ApplicantIncome"]

# Check homogeneity of variance using box plots and Levene's test
sns.boxplot(x='Credit_History', y='ApplicantIncome', data=df)
statistic, p_value = stats.levene(applicant_income_good_credit,applicant_income_poor_credit)
print(f"Levene's test results: statistic={statistic:.2f}, p-value={p_value:.2f}")

# Check normality assumption using Q-Q plots
fig, ax = plt.subplots(1, 2)
stats.probplot(applicant_income_good_credit, plot=ax[0])
stats.probplot(applicant_income_poor_credit, plot=ax[1])

ax[0].set_title('applicant_income_good_credit')
ax[1].set_title('applicant_income_poor_credit')
plt.show()

# Check normality assumption using Shapiro-Wilk test
shapiro_Credit_good = shapiro(applicant_income_good_credit)
shapiro_Credit_poor = shapiro(applicant_income_poor_credit)

# Print the results
print('Shapiro-Wilk test results:')
print('applicant_income_good_credit:', shapiro_Credit_good)
print('applicant_income_poor_credit:', shapiro_Credit_poor)

"""After doing some tests to check the homogeneity of variance and normality ,see the assumptions of T test or Anova test not materialized . So we will Use nonparametric tests :"""

# Use Kruskal-Wallis H test to compare relation between Credit_History and ApplicantIncome
applicant_income_good_credit = df[df["Credit_History"] == 1]["ApplicantIncome"]
applicant_income_poor_credit = df[df["Credit_History"] == 0]["ApplicantIncome"]

kruskal_test = kruskal(applicant_income_good_credit, applicant_income_poor_credit )
print('Kruskal-Wallis H test results:')
print('p-value:', kruskal_test.pvalue)
if kruskal_test.pvalue < 0.05:
     print("There is a significant difference in ApplicantIncome based on Credit_History.")
else:
    print("There is no significant difference in ApplicantIncome based on Credit_History.")

"""#  Is there a relationship between Education and ApplicantIncome?"""

# Subset the dataset into two groups based on 'Credit_History'
applicant_income_graduate = df[df["Education"] == "Graduate"]["ApplicantIncome"]
applicant_income_not_graduate = df[df["Education"] == "Not Graduate"]["ApplicantIncome"]

#Check homogeneity of variance using box plots and Levene's test
sns.boxplot(x='Education', y='ApplicantIncome', data=df)
statistic, p_value = stats.levene(applicant_income_graduate,applicant_income_not_graduate)
print(f"Levene's test results: statistic={statistic:.2f}, p-value={p_value:.2f}")

# Check normality assumption using Q-Q plots
fig, ax = plt.subplots(1, 2)
stats.probplot(applicant_income_graduate, plot=ax[0])
stats.probplot(applicant_income_not_graduate, plot=ax[1])

ax[0].set_title('applicant_income_graduate')
ax[1].set_title('applicant_income_not_graduate')
plt.show()

# Check normality assumption using Shapiro-Wilk test
shapiro_graduate = shapiro(applicant_income_graduate)
shapiro_not_graduate = shapiro(applicant_income_not_graduate)

# Print the results
print('Shapiro-Wilk test results:')
print('applicant_income_graduate:', shapiro_graduate)
print('applicant_income_not_graduate:', shapiro_not_graduate)

"""After doing some tests to check the homogeneity of variance and normality ,see the assumptions of T test or Anova test not materialized . So we will Use nonparametric tests :"""

# Use Kruskal-Wallis H test to compare relation between Education and ApplicantIncome
applicant_income_graduate = df[df["Education"] == "Graduate"]["ApplicantIncome"]
applicant_income_not_graduate = df[df["Education"] == "Not Graduate"]["ApplicantIncome"]

kruskal_test = kruskal(applicant_income_graduate, applicant_income_not_graduate )
print('Kruskal-Wallis H test results:')
print('p-value:', kruskal_test.pvalue)
if kruskal_test.pvalue < 0.05:
     print("There is a significant difference in ApplicantIncome based on education.")
else:
    print("There is no significant difference in ApplicantIncome based on education.")

"""# Are there any notable differences in the income of each education level and how that reflected on the approval rate status?"""

# Group the data by education level and calculate the mean and median income for each group
income_by_education = df.groupby('Education')['ApplicantIncome'].agg(['mean', 'median']).reset_index()

# Calculate the loan approval rate for each education level
approval_by_education = df.groupby('Education')['Loan_Status'].value_counts(normalize=True).mul(100).rename('Approval_Rate').reset_index()

print(income_by_education)
print(approval_by_education)

